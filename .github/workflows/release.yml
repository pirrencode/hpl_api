name: Create Release on Main Branch Push

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14'

      - name: Get the latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          echo "Latest tag: $latest_tag"
          echo "tag=$latest_tag" >> $GITHUB_ENV
          echo "##[set-output name=tag;]$latest_tag"

      - name: Increment version number
        id: increment_version
        run: |
          current_version="${{ env.tag }}"
          echo "Current version: $current_version"
          
          if [ -z "$current_version" ]; then
            echo "Error: Failed to retrieve the current version."
            exit 1
          fi

          current_version="${current_version#v}"
          echo "Version without 'v' prefix: $current_version"

          IFS='.' read -r -a version_parts <<< "$current_version"
          
          echo "Version parts: ${version_parts[@]}"
          echo "Number of version parts: ${#version_parts[@]}"

          if [ ${#version_parts[@]} -ne 3 ]; then
            echo "Error: Invalid version format. Expected 'vX.Y.Z'."
            exit 1
          fi
          
          new_patch_version=$((version_parts[2] + 1))
          
          new_version="v${version_parts[0]}.${version_parts[1]}.$new_patch_version"
          
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create new tag
        id: create_tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a ${{ env.new_version }} -m "Release ${{ env.new_version }}"
          git push origin ${{ env.new_version }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_version }}
          release_name: "Release ${{ env.new_version }}"
          body: "New release for version ${{ env.new_version }}"
          draft: false
          prerelease: false
